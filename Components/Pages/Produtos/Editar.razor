@page "/produtos/editar/{Id:int}"
@using Microsoft.EntityFrameworkCore
@using ProdutosCrud.Data
@using ProdutosCrud.Models
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
 
<h3>Editar Produto</h3>
 
@if (produto is null)
{
    <p>Carregando...</p>
}
else
{
    <EditForm Model="@produto" OnValidSubmit="SalvarProduto" FormName="editForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
 
        <div class="form-group">
            <label>Nome:</label>
            <InputText @bind-Value="produto.Nome" class="form-control" />
            <ValidationMessage For="@(() => produto.Nome)" />
        </div>
 
        <div class="form-group">
            <label>Descrição:</label>
            <InputText @bind-Value="produto.Descricao" class="form-control" />
            <ValidationMessage For="@(() => produto.Descricao)" />
        </div>
 
        <div class="form-group">
            <label>Preço:</label>
            <InputNumber @bind-Value="produto.Preco" class="form-control" />
            <ValidationMessage For="@(() => produto.Preco)" />
        </div>
 
        <div class="form-group">
            <label>Quantidade:</label>
            <InputNumber @bind-Value="produto.Quantidade" class="form-control" />
            <ValidationMessage For="@(() => produto.Quantidade)" />
        </div>
 
        <button type="submit" class="btn btn-primary mt-3">Salvar</button>
        <a href="/produtos" class="btn btn-secondary mt-3">Voltar</a>
    </EditForm>
}
 
@code {
    [Parameter]
    public int Id { get; set; }
 
    private Produto? produto;
    private string? mensagemErro;
 
    protected override async Task OnParametersSetAsync()
    {
        try 
        {
            produto = await DbContext.Produtos.FindAsync(Id);
            if (produto is null)
            {
                NavigationManager.NavigateTo("/produtos");
            }
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao carregar produto: {ex.Message}";
            Console.Error.WriteLine(mensagemErro);
        }
    }
 
    private async Task SalvarProduto()
    {
        if (produto is not null)
        {
            try
            {
                // Garante que o Entity Framework está rastreando a entidade
                var entry = DbContext.Entry(produto);
                if (entry.State == EntityState.Detached)
                {
                    DbContext.Produtos.Attach(produto);
                }
                
                entry.State = EntityState.Modified;
                await DbContext.SaveChangesAsync();
                NavigationManager.NavigateTo("/produtos");
            }
            catch (Exception ex)
            {
                mensagemErro = $"Erro ao salvar produto: {ex.Message}";
                Console.Error.WriteLine(mensagemErro);
                StateHasChanged();
            }
        }
    }
}
